{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"api_reference/","title":"API Reference","text":""},{"location":"api_reference/#arrowquality.validator.Validator","title":"<code>Validator</code>","text":""},{"location":"api_reference/#arrowquality.validator.Validator.values_between","title":"<code>values_between(column_name, min, max)</code>","text":"<p>Check if values are within the provided range (inclusive of both boundaries)</p> <p>Parameters:</p> Name Type Description Default <code>column_name</code> <code>str</code> <p>Name of column to check</p> required <code>min</code> <code>int</code> <p>Minimum limit</p> required <code>max</code> <code>int</code> <p>Maximum limit</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True or False</p>"},{"location":"api_reference/#arrowquality.validator.Validator.values_greater_than","title":"<code>values_greater_than(column_name, limit)</code>","text":"<p>Check if values are greater than the provided limit</p> <p>Parameters:</p> Name Type Description Default <code>column_name</code> <code>str</code> <p>Name of column to check</p> required <code>limit</code> <code>int</code> <p>Limit value</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True or False</p>"},{"location":"api_reference/#arrowquality.validator.Validator.values_in_set","title":"<code>values_in_set(column_name, set_)</code>","text":"<p>Check if values are in the provided set</p> <p>Parameters:</p> Name Type Description Default <code>column_name</code> <code>str</code> <p>Name of column to check</p> required <code>set_</code> <code>Set[Union[str, int, float]]</code> <p>Set of allowed values</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True or False</p>"},{"location":"api_reference/#arrowquality.validator.Validator.values_less_than","title":"<code>values_less_than(column_name, limit)</code>","text":"<p>Check if values are less than the provided limit</p> <p>Parameters:</p> Name Type Description Default <code>column_name</code> <code>str</code> <p>Name of column to check</p> required <code>limit</code> <code>int</code> <p>Limit value</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True or False</p>"},{"location":"api_reference/#arrowquality.validator.Validator.values_match_regex","title":"<code>values_match_regex(column_name, pattern)</code>","text":"<p>Check if values match the provided regex pattern</p> <p>Parameters:</p> Name Type Description Default <code>column_name</code> <code>str</code> <p>Name of column to check</p> required <code>pattern</code> <code>str</code> <p>Regex pattern</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True or False</p>"},{"location":"api_reference/#arrowquality.validator.Validator.values_mean_between","title":"<code>values_mean_between(column_name, min, max)</code>","text":"<p>Check if mean of values is within the provided range (inclusive of both boundaries)</p> <p>Parameters:</p> Name Type Description Default <code>column_name</code> <code>str</code> <p>Name of column to check</p> required <code>min</code> <code>int</code> <p>Minimum limit</p> required <code>max</code> <code>int</code> <p>Maximum limit</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True or False</p>"},{"location":"api_reference/#arrowquality.validator.Validator.values_median_between","title":"<code>values_median_between(column_name, min, max)</code>","text":"<p>Check if approximate median of values is within the provided range (inclusive of both boundaries)</p> <p>Parameters:</p> Name Type Description Default <code>column_name</code> <code>str</code> <p>Name of column to check</p> required <code>min</code> <code>int</code> <p>Minimum limit</p> required <code>max</code> <code>int</code> <p>Maximum limit</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True or False</p>"},{"location":"api_reference/#arrowquality.validator.Validator.values_mode_between","title":"<code>values_mode_between(column_name, min, max)</code>","text":"<p>Check if mode of values is within the provided range (inclusive of both boundaries)</p> <p>Parameters:</p> Name Type Description Default <code>column_name</code> <code>str</code> <p>Name of column to check</p> required <code>min</code> <code>int</code> <p>Minimum limit</p> required <code>max</code> <code>int</code> <p>Maximum limit</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True or False</p>"},{"location":"api_reference/#arrowquality.validator.Validator.values_not_greater_than","title":"<code>values_not_greater_than(column_name, limit)</code>","text":"<p>Check if values are not greater than the provided limit</p> <p>Parameters:</p> Name Type Description Default <code>column_name</code> <code>str</code> <p>Name of column to check</p> required <code>limit</code> <code>int</code> <p>Limit value</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True or False</p>"},{"location":"api_reference/#arrowquality.validator.Validator.values_not_less_than","title":"<code>values_not_less_than(column_name, limit)</code>","text":"<p>Check if values are not less than the provided limit</p> <p>Parameters:</p> Name Type Description Default <code>column_name</code> <code>str</code> <p>Name of column to check</p> required <code>limit</code> <code>int</code> <p>Limit value</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True or False</p>"},{"location":"api_reference/#arrowquality.validator.Validator.values_not_null","title":"<code>values_not_null(column_name)</code>","text":"<p>Check if values are are not null</p> <p>Parameters:</p> Name Type Description Default <code>column_name</code> <code>str</code> <p>Name of column to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True or False</p>"},{"location":"api_reference/#arrowquality.validator.Validator.values_of_type","title":"<code>values_of_type(column_name, type)</code>","text":"<p>Check if values are of the provided type</p> <p>Parameters:</p> Name Type Description Default <code>column_name</code> <code>str</code> <p>Name of column to check</p> required <code>type</code> <code>str</code> <p>Data type</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True or False</p>"},{"location":"api_reference/#arrowquality.validator.Validator.values_stddev_between","title":"<code>values_stddev_between(column_name, min, max)</code>","text":"<p>Check if standard deviation of values is within the provided range (inclusive of both boundaries)</p> <p>Parameters:</p> Name Type Description Default <code>column_name</code> <code>str</code> <p>Name of column to check</p> required <code>min</code> <code>int</code> <p>Minimum limit</p> required <code>max</code> <code>int</code> <p>Maximum limit</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True or False</p>"},{"location":"api_reference/#arrowquality.validator.Validator.values_stddev_greater_than","title":"<code>values_stddev_greater_than(column_name, limit)</code>","text":"<p>Check if standard deviation of values is greater than the provided limit</p> <p>Parameters:</p> Name Type Description Default <code>column_name</code> <code>str</code> <p>Name of column to check</p> required <code>limit</code> <code>int</code> <p>Limit value</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True or False</p>"},{"location":"api_reference/#arrowquality.validator.Validator.values_stddev_less_than","title":"<code>values_stddev_less_than(column_name, limit)</code>","text":"<p>Check if standard deviation of values is less than the provided limit</p> <p>Parameters:</p> Name Type Description Default <code>column_name</code> <code>str</code> <p>Name of column to check</p> required <code>limit</code> <code>int</code> <p>Limit value</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True or False</p>"},{"location":"api_reference/#arrowquality.validator.Validator.values_sum_between","title":"<code>values_sum_between(column_name, min, max)</code>","text":"<p>Check if sum of values is within the provided range (inclusive of both boundaries)</p> <p>Parameters:</p> Name Type Description Default <code>column_name</code> <code>str</code> <p>Name of column to check</p> required <code>min</code> <code>int</code> <p>Minimum limit</p> required <code>max</code> <code>int</code> <p>Maximum limit</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True or False</p>"},{"location":"api_reference/#arrowquality.validator.Validator.values_unique","title":"<code>values_unique(column_name)</code>","text":"<p>Check if values are unique</p> <p>Parameters:</p> Name Type Description Default <code>column_name</code> <code>str</code> <p>Name of column to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True or False</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#installation","title":"Installation","text":"pipuvpoetrypixi <pre><code>pip install arrowquality\n</code></pre> <pre><code>uv add arrowquality\n</code></pre> <pre><code>poetry add arrowquality\n</code></pre> <pre><code>pixi add arrowquality\n</code></pre>"},{"location":"quality_rules/","title":"Quality Rules","text":"Rule Description Arguments values_of_type Check if values are of the proveded type <code>column_name</code>: column name to check<code>type</code>: data type values_unique Check if values are unique <code>column_name</code>: column name to check values_between Check if values are within the provided range (inclusive of both boundaries) <code>column_name</code>: column name to check<code>min</code><code>max</code> values_not_greater_than Check if values are not greater than the provided limit <code>column_name</code>: column name to check<code>limit</code>: limit value values_not_less_than Check if values are not less than the provided limit <code>column_name</code>: column name to check<code>limit</code>: limit value values_in_set Check if values are in the provided set <code>column_name</code>: column name to check<code>set_</code>: set of allowed values values_not_null Check if values are are not null <code>column_name</code>: column name to check"},{"location":"supported_formats/","title":"Supported Formats","text":"<p>Many data formats can be converted to PyArrow tables.</p>"},{"location":"supported_formats/#csv","title":"CSV","text":"<p>pyarrow.csv.read_csv</p> <pre><code>from pyarrow import csv\n\ntable = csv.read_csv(\"/path/to/file\")\n</code></pre>"},{"location":"supported_formats/#daft","title":"Daft","text":"<p>daft.DataFrame.to_arrow</p> <pre><code>table = df.to_arrow()\n</code></pre>"},{"location":"supported_formats/#datafusion","title":"DataFusion","text":"<p>pyarrow.table</p> <pre><code>import pyarrow as pa\n\ntable = pa.table(df)\n</code></pre>"},{"location":"supported_formats/#delta","title":"Delta","text":"<p>deltalake.table.DeltaTable.to_pyarrow_table</p> <pre><code>table = delta_table.to_pyarrow_table()\n</code></pre>"},{"location":"supported_formats/#duckdb","title":"DuckDB","text":"<p>duckdb.DuckDBPyConnection.arrow</p> <pre><code>import duckdb\n\ntable = duckdb.sql(\"SELECT * FROM my_table\").arrow()\n</code></pre>"},{"location":"supported_formats/#feather","title":"Feather","text":"<p>pyarrow.feather.read_table</p> <pre><code>import pyarrow.feather as feather\n\ntable = feather.read_table(\"/path/to/file\")\n</code></pre>"},{"location":"supported_formats/#iceberg","title":"Iceberg","text":"<p>pyiceberg.table.DataScan.to_arrow</p> <pre><code>table = iceberg_table.scan().to_arrow()\n</code></pre>"},{"location":"supported_formats/#json","title":"JSON","text":"<p>pyarrow.json.read_json</p> <pre><code>from pyarrow import json\n\ntable = json.read_json(\"/path/to/file\")\n</code></pre>"},{"location":"supported_formats/#lance","title":"Lance","text":"<p>lance.LanceDataset.to_table</p> <pre><code>table = dataset.to_table()\n</code></pre>"},{"location":"supported_formats/#pandas","title":"Pandas","text":"<p>pyarrow.Table.from_pandas</p> <pre><code>import pyarrow as pa\n\ntable = pa.Table.from_pandas(df)\n</code></pre>"},{"location":"supported_formats/#parquet","title":"Parquet","text":"<p>pyarrow.parquet.read_table</p> <pre><code>import pyarrow.parquet as pq\n\ntable = pq.read_table(\"/path/to/file\")\n</code></pre>"},{"location":"supported_formats/#polars","title":"Polars","text":"<p>polars.DataFrame.to_arrow</p> <pre><code>table = df.to_arrow()\n</code></pre>"},{"location":"supported_formats/#vaex","title":"Vaex","text":"<p>vaex.dataframe.DataFrame.to_arrow_table</p> <pre><code>table = df.to_arrow_table()\n</code></pre>"}]}